import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
data = pd.read_csv('spam.csv', encoding='latin-1')


print(data.head())


print(data.isnull().sum())


data = data[['v1', 'v2']]
data.columns = ['label', 'text']


print(data.head())

data['label'] = data['label'].map({'ham': 0, 'spam': 1})


X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)

vectorizer = TfidfVectorizer(stop_words='english', max_features=3000)

X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

classifier = MultinomialNB()

classifier.fit(X_train_tfidf, y_train)

y_pred = classifier.predict(X_test_tfidf)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:')
print(cm)

cr = classification_report(y_test, y_pred)
print('Classification Report:')
print(cr)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
# Example emails
emails = [
    "Congratulations! You've won a $1,000 Walmart gift card. Go to http://bit.ly/123456 to claim now.",
    "Hey John, are we still on for the meeting tomorrow?",
    "Please update your account information to avoid service interruption.",
    "Dear friend, I am a prince from Nigeria in need of assistance. Please send your bank details to transfer the funds."
]

emails_tfidf = vectorizer.transform(emails)

predictions = classifier.predict(emails_tfidf)

for email, prediction in zip(emails, predictions):
    label = 'Spam' if prediction == 1 else 'Ham'
    print(f'Email: {email}\nPrediction: {label}\n')
